from io import BytesIO
from struct import pack
from binascii import hexlify, unhexlify

b1 = bytearray()
b2 = bytes(b'\x69')

def byteCopy(source,sOffset,dest,dOffset,size):
    
    if size <= 0:
        return False
    
    if len(dest) < dOffset + size:
        dest.extend(bytes(dOffset + size - len(dest)))

    i = 0

    while i < size:
        if sOffset + i >= len(source):
            break

        dest[dOffset + i] = source[sOffset + i]
        i = i + 1

    return dest

test1 = unhexlify
test2 = unhexlify



SHWfile = BytesIO()
SHWfile.seek(0x0)

SHWfile.write(b'ETC EXP II') #magic string

SHWfile.seek(0x10)

SHWfile.write(b'\x00\x00\x00\x00') #header type and index

SHWfile.seek(0x1C)

SHWfile.write(pack('<l',0x20))

print(SHWfile.getbuffer().hex('\n',16))
print(SHWfile.tell())

print(test2.hex('\n',16))